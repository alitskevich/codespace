<component id="ItemTitle">
  <span class="truncate break-words">{R.enums.entities | find: kind :'id' |dot:'symbol'} {title ?? name ?? '--'}</span>
</component>

<component id="TableCell.ItemTitle">
  <span class="truncate break-words">{R.enums.entities | find: kind :'id' |dot:'symbol'} {title ?? name ?? '--'}</span>
</component>

<component id="ItemTitle.Persons">
  <Connector data="{R.enums.gender | find: gender:'id'}" change="-> genderItem" />
  <div class="inline-flex items-center gap-1">
    <span class="truncate break-words">👤 {lname ?? '--'} {fname} {mname}</span>
    <StyledText (...)="{genderItem}" def="{gender??'-'}" />
    <span class="truncate break-words">{bdate}</span>
  </div>
</component>

<component id="ItemTitle.Places">
  <div class="inline-flex items-center text-base  text-gray-900 dark:text-white gap-1">
    <span class="truncate break-words">📍 {type}</span>
    <span class="truncate break-words">{city}</span>
    <span class="truncate break-words text-sm">({R.enums.regions | resolveNameById: region})</span>
  </div>
</component>

<component id="ItemLink">
  <Fragment If="id">
    <IndexedDbQuery Ref="query" db="<-db" value="{id}" />

    <Connector data="<-query.data|dot:0" change="-> item" />

    <Fragment If="!item">
      <Then>
        <Svg.Spinner size="6" title="{id ?? 'Loading...'}" />
      </Then>
      <Else>
        <NavLink href="/items/{id|strHead:':'}?itemId={id}" class="{class} p-2">
          <Dynamic As="ItemTitle.{item.kind | capitalize}" (...)="{item}" class="truncate" />
        </NavLink>
      </Else>
    </Fragment>

  </Fragment>
</component>